#version 420

in vec3 position_eye;
in vec3 normal_eye;
in vec3 light_position_eye; 
in vec2 texture_coord;

uniform vec3 Ks ; // specular reflectance
uniform vec3 Kd ; // diffuse reflectance
uniform vec3 Ka ; // ambient reflectance
uniform sampler2D basic_texture;


vec3 Ls = vec3 (1.0, 1.0, 1.0); //white specular color
vec3 Ld = vec3 (0.7, 0.7, 0.7); // dull white diffuse light 
vec3 La = vec3 (0.5, 0.5 ,0.5);  // grey ambient color
float specular_exponent = 100.0; //specular 'power'?

vec2 flipped_st = vec2 (texture_coord.s, 1.0- texture_coord.t);  //flipping the textures because opengl and 3d modelers use different tings


out vec4 fragment_color;
void main()
{
	vec4 texel = texture(basic_texture, flipped_st);   
    
    //ambient
    vec3 Ia = La * Ka;
    
    //diffuse
    vec3 distance_to_light_eye = light_position_eye - position_eye;
    vec3 direction_to_light_eye = normalize(distance_to_light_eye);
    float dot_prod = dot(direction_to_light_eye, normal_eye);
    dot_prod = max(dot_prod, 0.0);
    vec3 Id = Ld * Kd * dot_prod; 
    
    //Specular Intensity
    vec3 reflection_eye = reflect(-direction_to_light_eye, normal_eye);
    
	vec3 surface_to_viewer_eye = normalize(-position_eye);
    
	float dot_prod_specular = dot(reflection_eye, surface_to_viewer_eye);
    
	dot_prod_specular = max(dot_prod_specular, 0.0);
    
	float specular_factor = pow(dot_prod_specular, specular_exponent);
    
	vec3 Is = Ls * Ks * specular_factor;    
    
    vec4 frag_color = vec4(Is + Id + Ia, 1.0);    
    fragment_color =  frag_color*texel;
}